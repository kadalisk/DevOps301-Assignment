node {

  try {

    stage('Git CheckOut') {
      git branch: 'main', url: 'https://github.com/kadalisk/DevOps301-Assignment.git'
    }

    def project_path="00-Application/petclinic-code"

    dir(project_path) {

      stage('Maven Clean') {
        sh 'mvn clean'
      }

      stage('Maven Compile') {
        sh 'mvn compile'
      }

      stage('Maven Testing') {
        sh 'mvn test'
      }

      stage('Maven Package & SonarQube Analysis') {
        withSonarQubeEnv('sonar-cube') {
          sh 'mvn package sonar:sonar'
        }
      }

      stage('Archive Artifacts to Artifactory') {
        rtUpload (
          serverId: 'local-artifactory',
          spec: '''{
            "files": [
              {
                "pattern": "**/*.war",
      		  "target": "generic-snapshot/"
              }
            ]
          }''',
          buildName: 'petclinic',
          buildNumber: $BUILD_NUMBER
        )

        rtPublishBuildInfo(serverId: 'local-artifactory')

      }

      stage('Pre-Setup for Ansible') {
        sh 'cp -rf target/*.war ../../03-Ansible/01-Tomcat/files/'
      }

    }

    def ansible_path="03-Ansible/01-Tomcat/"

    dir(ansible_path){

      stage('Ansible Deployment') {
        sh 'ansible-playbook petclinic-webserver.yaml'
      }

    }

  emailext body: '$DEFAULT_CONTENT', subject: '$PROJECT_NAME - Build # $BUILD_NUMBER - SUCCESSFUL', to: 'kadalisk@gmail.com'

  } catch (err) {
    emailext body: '$DEFAULT_CONTENT', subject: '$PROJECT_NAME - Build # $BUILD_NUMBER - ERROR!', to: 'kadalisk@gmail.com'
  }

}